"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4530],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),u=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(r),f=o,m=d["".concat(i,".").concat(f)]||d[f]||p[f]||a;return r?n.createElement(m,s(s({ref:t},l),{},{components:r})):n.createElement(m,s({ref:t},l))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var u=2;u<a;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4066:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const a={},s=void 0,c={permalink:"/job_hunting_notes/blog/2022/10/10/",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-10-10.md",source:"@site/blog/2022-10-10.md",title:"",description:"---",date:"2022-10-10T00:00:00.000Z",formattedDate:"October 10, 2022",tags:[],readingTime:1.235,hasTruncateMarker:!1,authors:[],frontMatter:{},nextItem:{title:"First Blog Post",permalink:"/job_hunting_notes/blog/first-blog-post"}},i={authorsImageUrls:[]},u=[{value:"tags: interviews",id:"tags-interviews",level:2}],l={toc:u};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("hr",null),(0,o.kt)("p",null,"slug: colgate-hiring-test\ntitle: Hiring test afterthoughts\nauthors:\nname: David Li\ntitle: React test\nurl: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/FriendlyUser"},"https://github.com/FriendlyUser"),"\nimage_url: ",(0,o.kt)("a",{parentName:"p",href:"https://avatars.githubusercontent.com/u/13860264?v=4"},"https://avatars.githubusercontent.com/u/13860264?v=4")),(0,o.kt)("h2",{id:"tags-interviews"},"tags: ","[interviews]"),(0,o.kt)("p",null,"Basic react questions, some of them seemed about error boundaries, seem to answer most of the questions correctly."),(0,o.kt)("p",null,"Cant publish this cause that unethetic, just keep it here"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import React from \'react\';\n\nclass AutocorrectTextarea extends React.Component {\n  constructor(props) {\n    super(props);\n    // this.state = props;\n    this.onTextInput = this.onTextInput.bind(this);\n    this.state = {\n      correctedText: ""\n    }\n  }\n\n  // take input and look for corrections\n  onTextInput (e) {\n    const currentText = e.target.value;\n    // get corrections\n    // split words assuming on space only\n    const words  = currentText.split(" ");\n    // check for corrections if more than one space is available\n    if (words.length < 1) {\n      // one word, no space characters according to assignment, just return\n      this.setState({\n        correctedText: currentText\n      });\n    } else {\n      // handle autocorrect on all words\n      const correctedWords = words.map((word, index) => {\n        // for last entry, no space yet, so just add the word and return\n        if (index === words.length - 1) {\n          return word;\n        }\n        // use object mapping for each word;\n        // if there is a correction it should be found\n        // ignore corrections if last word\n        const correction = this.props.corrections[word];\n        if (correction) {\n          return correction;\n        } else {\n          return word;\n        }\n      })\n      const correctedText = correctedWords.join(" ")\n      this.setState({\n        correctedText\n      });\n    }\n  }\n  render() {\n    return (\n      <div className="text-center">\n        <textarea data-testid="textarea" value={this.state.correctedText} rows={10} cols={80} className="card" onChange={this.onTextInput} />\n      </div>\n    );\n  }\n}\n\nexport default AutocorrectTextarea;\n')))}p.isMDXComponent=!0}}]);